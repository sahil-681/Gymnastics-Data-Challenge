sampsd_arsenic <- sd(sampled$Arsenic)
z_stars <- qnorm(1 - c(0.1, 0.05, 0.01)/2, 0, 1)
print("90% CI:")
print(c(sampmean_arsenic - (z_stars[1]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[1]*sampsd_arsenic/sqrt(30))))
print("95% CI:")
print(c(sampmean_arsenic - (z_stars[2]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[2]*sampsd_arsenic/sqrt(30))))
print("99% CI:")
print(c(sampmean_arsenic - (z_stars[3]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[3]*sampsd_arsenic/sqrt(30))))
z_stars[2]
z_stars[1]
z_stars[3]
print(sum(pawnee$New_hlth_issue == "Y")/dim(pawnee)[2])
print(sum(pawnee$New_hlth_issue == "Y")/dim(pawnee)[1])
hist(pawnee$Arsenic, main="Distribution of Arsenic Levels", xlab="Levels", ylab="Frequency")
hist(pawnee$Arsenic, main="Distribution of Arsenic Levels", xlab="Levels", ylab="Frequency", breaks=30)
hist(pawnee$Arsenic, main="Distribution of Arsenic Levels", xlab="Levels", ylab="Frequency", breaks=50)
# We first create objects for common quantities we will use for this exercise.
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
phats <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
phats[i] <- mean(sample_i$New_hlth_issue == "Y")
}
# We first create objects for common quantities we will use for this exercise.
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
phats <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
phats[i] <- mean(sample_i$New_hlth_issue == "Y")
}
hist(phats, prob=TRUE)
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE)
# We first create objects for common quantities we will use for this exercise.
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
phats <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
phats[i] <- mean(sample_i$New_hlth_issue == "Y")
}
hist(phats, prob=TRUE, main="Sample Proportions of Households with a New Health Issue", xlab="Sample Means")
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE)
sampmeans_mean <- mean(phats)
print(sampmeans_mean)
sampmeans_sd <- sd(phats)
sampmeans_mean <- mean(phats)
print(sampmeans_mean)
sampmeans_sd <- sd(phats)
print(sampmeans_sd)
theory_mean <- mean(pawnee$Arsenic)
print(theory_mean)
theory_sd <- sqrt(sd(pawnee$Arsenic)/n)
print(theory_sd)
theory_mean <- sum(pawnee$New_hlth_issue == "Y")/dim(pawnee)[1]
print(theory_mean)
theory_sd <- sqrt(theory_mean*(1-theory_mean)/n)
print(theory_sd)
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
arsenic_means <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
arsenic_means[i] <- mean(pawnee$Arsenic)
}
hist(arsenic_means, prob=TRUE, main="Sample Mean Arsensic Levels Histogram", xlab="Sample Means of Arsenic Levels")
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE)
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
arsenic_means <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
arsenic_means[i] <- mean(pawnee$Arsenic)
}
hist(arsenic_means, prob=TRUE, main="Sample Mean Arsensic Levels Histogram", xlab="Sample Means of Arsenic Levels")
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE)
arsenic_means
n <- 30 # The sample size
N <- 541 # The population size
M <- 1000 # Number of samples/repetitions
# Create vectors to store the simulated proportions from each repetition.
arsenic_means <- numeric(M) # for sample proportions
# Set the seed for reproduceability
set.seed(123)
# Always set the seed OUTSIDE the for loop.
# Now we start the loop. Let i cycle over the numbers 1 to 1000 (i.e., iterate 1000 times).
for(i in seq_len(M)){
# The i-th iteration of the for loop represents a single repetition.
# Take a simple random sample of size n from the population of size N.
index <- sample(N, size = n)
# Save the random sample in the sample_i vector.
sample_i <- pawnee[index, ]
# Compute the proportion of the i-th sample of households with a new health issue.
arsenic_means[i] <- mean(sample_i$Arsenic)
}
arsenic_means
hist(arsenic_means, prob=TRUE, main="Sample Mean Arsensic Levels Histogram", xlab="Sample Means of Arsenic Levels")
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE)
hist(arsenic_means, prob=TRUE, main="Sample Mean Arsensic Levels Histogram", xlab="Sample Means of Arsenic Levels")
curve(dnorm(x, mean(arsenic_means), sd(arsenic_means)), add = TRUE)
sampmean_arsenic <- mean(sampled$Arsenic)
print("Sample Mean Arsenic Sample")
print(sampmean_arsenic)
sampmean_hlth <- sum(sampled$New_hlth_issue == "Y")/dim(sampled)[1]
print("Sample proportion experiencing major health issue")
print(sampmean_hlth)
sampsd_arsenic <- sd(sampled$Arsenic)
z_stars <- qnorm(1 - c(0.1, 0.05, 0.01)/2, 0, 1)
print("90% CI:")
print(c(sampmean_arsenic - (z_stars[1]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[1]*sampsd_arsenic/sqrt(30))))
print("95% CI:")
print(c(sampmean_arsenic - (z_stars[2]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[2]*sampsd_arsenic/sqrt(30))))
print("99% CI:")
print(c(sampmean_arsenic - (z_stars[3]*sampsd_arsenic/sqrt(30)),
sampmean_arsenic + (z_stars[3]*sampsd_arsenic/sqrt(30))))
print(mean(pawnee$New_hlth_issue == "Y")
print(mean(pawnee$New_hlth_issue == "Y"))
print(mean(pawnee$New_hlth_issue == "Y"))
print("Prop All Households Experiencing New Health Issue")
print(mean(pawnee$New_hlth_issue == "Y"))
print("Prop All Households Experiencing New Health Issue: ")
print(mean(pawnee$New_hlth_issue == "Y"))
sampmeans_mean <- mean(phats)
print("Mean of Sample Means")
print(sampmeans_mean)
sampmeans_sd <- sd(phats)
print("SD of Sample Means")
print(sampmeans_sd)
sampmeans_mean <- mean(phats)
print("Mean of Sample Means")
print(sampmeans_mean)
sampmeans_sd <- sd(phats)
print("SD of Sample Means")
print(sampmeans_sd)
sampsd_arsenic <- sd(sampled$Arsenic)
z_stars <- qnorm(1 - c(0.1, 0.05, 0.01)/2, 0, 1)
print("90% CI:")
print(c(sampmean_arsenic - (z_stars[1]*sqrt(sampsd_arsenic/30)),
sampmean_arsenic + (z_stars[1]*sqrt(sampsd_arsenic/30))))
print("95% CI:")
print(c(sampmean_arsenic - (z_stars[2]*sqrt(sampsd_arsenic/30)),
sampmean_arsenic + (z_stars[2]*sqrt(sampsd_arsenic/30))))
print("99% CI:")
print(c(sampmean_arsenic - (z_stars[3]*sqrt(sampsd_arsenic/30)),
sampmean_arsenic + (z_stars[3]*sqrt(sampsd_arsenic/30))))
nhi_stderr <- sqrt(sampmean_hlth*(1-sampmean_hlth)/30)
z_stars <- qnorm(1 - c(0.1, 0.05, 0.01)/2, 0, 1)
print("90% CI:")
print(c(sampmean_arsenic - (z_stars[1]*nhi_stderr),
sampmean_arsenic + (z_stars[1]*nhi_stderr)))
print("95% CI:")
print(c(sampmean_arsenic - (z_stars[2]*nhi_stderr),
sampmean_arsenic + (z_stars[2]*nhi_stderr)))
print("99% CI:")
print(c(sampmean_arsenic - (z_stars[3]*nhi_stderr),
sampmean_arsenic + (z_stars[3]*nhi_stderr)))
nhi_stderr <- sqrt(sampmean_hlth*(1-sampmean_hlth)/30)
z_stars <- qnorm(1 - c(0.1, 0.05, 0.01)/2, 0, 1)
print("90% CI:")
print(c(sampmean_hlth - (z_stars[1]*nhi_stderr),
sampmean_hlth + (z_stars[1]*nhi_stderr)))
print("95% CI:")
print(c(sampmean_hlth - (z_stars[2]*nhi_stderr),
sampmean_hlth + (z_stars[2]*nhi_stderr)))
print("99% CI:")
print(c(sampmean_hlth - (z_stars[3]*nhi_stderr),
sampmean_hlth + (z_stars[3]*nhi_stderr)))
getsd()
getwd()
setwd("Classes/SDS625/Gymnastics-Data-Challenge/data/")
setwd("//")
setwd("..")
getwd()
setwd("SHINY APP/")
means_best <- readRDS("best.teams.mens.rds")
mens_best <- readRDS("best.teams.mens.rds")
View(mens_best)
View(means_best)
View(means_best)
View(means_best)
View(means_best)
View(means_best)
unique(mens_best$optimizedteams$Country)
shiny::runApp()
runApp()
getwd(0)
getwd()
means_df <- read.csv("data/means_per_app.csv")
means_df[means_df$Country == "UKR"]
means_df[means_df$Country == "UKR" & means_df$Gender="m", ]
means_df[means_df$Country == "UKR" & means_df$Gender=="m", ]
cols <- c("ID", "Gender", "Country", "VT", "FX, HB, PB, PH, SR")
means_df[means_df$Country == "UKR" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "UKR" & means_df$Gender=="m", cols]
means_df[means_df$Country == "TUR" & means_df$Gender=="m", cols]
means_df[means_df$Country == "DEU" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "DEU" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "NDR" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "NET" & means_df$Gender=="m", cols]
unique(means_df$Country)
sort(unique(means_df$Country))
means_df[means_df$Country == "NED" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "NED" & means_df$Gender=="m", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
cols <- c("ID", "Gender", "Country", "VT", "FX", "HB", "PB", "PH", "SR")
means_df[means_df$Country == "NED" & means_df$Gender=="w", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "BB", "PB")
means_df[means_df$Country == "NED" & means_df$Gender=="w", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "BB", "UE")
means_df[means_df$Country == "NED" & means_df$Gender=="w", cols]
cols <- c("ID", "Gender", "Country", "VT", "FX", "BB", "UB")
means_df[means_df$Country == "NED" & means_df$Gender=="w", cols]
means_df[means_df$Country == "KOR" & means_df$Gender=="w", cols]
means_df[means_df$Country == "ROU" & means_df$Gender=="w", cols]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(tidyr)
means = read.csv("data/means_per_app.csv")
getwd()
## get reasonable set
source('get_reasonable_set.R')
setwd("..")
## simulate medals
source('simulate_medals.R')
library(dplyr)
library(tidyr)
means = read.csv("data/means_per_app.csv")
stddevs = read.csv("data/stddevs_per_app.csv")
startteams = read.csv("data/team_country_qualified_individuals.csv")
alt36m <- read.csv("data/mens_36_athletes.csv")
alt36w <- read.csv("data/womens_36_athletes.csv")
#### helper functions:
## get reasonable set
source('get_reasonable_set.R')
## simulate medals
source('simulate_medals.R')
# helper function for replacing temp players for each combination
replace_players <- function(start_teams, country, combinations, gender, i = 1) {
start_teams[start_teams$Country == country & start_teams$Gender == gender,
"ID"] <- combinations[[country]][i]
return(start_teams)
}
# helper function to get medaling scores for each country
medalscore <- function(sim_output, weights = c(50, 30, 15, 10, 9, 8, 7, 6)){
scores <- apply(sim_output[, -1], 1, function(row) sum(row * weights))
sim_output$Score <- scores
sim_output <- sim_output[order(sim_output$Score, decreasing = TRUE), ]
return(sim_output)
}
# main function for best teams
get.best.teams <- function(start_teams, countries, gender, means_df,
stddevs_df, qual36,
weights = c(50, 30, 15, 10, 9, 8, 7, 6)){
reasonable_set <- list()
combinations <- list()
if (gender == "m") {
all_sims <- data.frame(SimCount = numeric(),
Country = character(),
P1 = character(),
P2 = character(),
P3 = character(),
P4 = character(),
P5 = character(),
Gold = numeric(),
Silver = numeric(),
Bronze = numeric(),
VT = character(),
FX = character(),
HB = character(),
PB = character(),
PH = character(),
SR = character(),
TotalScore = numeric(),
MedalCount = numeric())
}
if (gender == "w") {
all_sims <- data.frame(SimCount = numeric(),
Country = character(),
P1 = character(),
P2 = character(),
P3 = character(),
P4 = character(),
P5 = character(),
Gold = numeric(),
Silver = numeric(),
Bronze = numeric(),
VT = character(),
BB = character(),
UB = character(),
FX = character(),
TotalScore = numeric(),
MedalCount = numeric())
}
for (i in 1:length(countries)) {
temp <- get_reasonable_sets(country = countries[i], gender = gender,
means_df = means_df, stddevs_df = stddevs_df, top_n = 5)
reasonable_set[[countries[i]]] <- temp
combinations[[countries[i]]] <- combn(temp, 5, simplify = F)
}
for (j in 1:length(combinations)) {
combcountry <- combinations[[j]]
ctry <- names(combinations[j])
top_score <- 0
sim_count <- nrow(all_sims)
if (gender == "m") {
temp_sim <- data.frame(SimCount = numeric(),
Country = character(),
P1 = character(),
P2 = character(),
P3 = character(),
P4 = character(),
P5 = character(),
Gold = numeric(),
Silver = numeric(),
Bronze = numeric(),
VT = character(),
FX = character(),
HB = character(),
PB = character(),
PH = character(),
SR = character(),
TotalScore = numeric(),
MedalCount = numeric())
}
if (gender == "w") {
temp_sim <- data.frame(SimCount = numeric(),
Country = character(),
P1 = character(),
P2 = character(),
P3 = character(),
P4 = character(),
P5 = character(),
Gold = numeric(),
Silver = numeric(),
Bronze = numeric(),
VT = character(),
BB = character(),
UB = character(),
FX = character(),
TotalScore = numeric(),
MedalCount = numeric())
}
if ((length(combinations)- j) == 1) {
print(paste("Optimization in progress for", names(combinations[j]), ":",
(length(combinations)- j), "more country to go"))
}
else {
print(paste("Optimization in progress for", names(combinations[j]), ":",
(length(combinations)- j), "more countries to go"))
}
for (k in 1:length(combcountry)) {
starttemp <- replace_players(start_teams, ctry, combinations, gender, k)
sim <- simulate_medals(starttemp, qual36, means_df, stddevs_df, gender)
sim$medals_table <- medalscore(sim$medals_table, weights)
sim_count = sim_count + 1
if (k %% 50 == 0) {
print(paste("Running simulation no.", k, "of", length(combcountry), "for", names(combinations[j])))
}
if (k == length(combcountry)) {
print(paste("Running final simulation for", names(combinations[j])))
}
if (sim$medals_table$Score[sim$medals_table$Country == ctry] > top_score) {
top_score <- sim$medals_table$Score[sim$medals_table$Country == ctry]
start_teams <- replace_players(start_teams, ctry, combinations, gender, k)
}
temp_sim[k, "SimCount"] <- sim_count
temp_sim[k, "Country"] <- ctry
temp_sim[k, "P1"] <- combinations[[ctry]][k][[1]][1]
temp_sim[k, "P2"] <- combinations[[ctry]][k][[1]][2]
temp_sim[k, "P3"] <-  combinations[[ctry]][k][[1]][3]
temp_sim[k, "P4"] <- combinations[[ctry]][k][[1]][4]
temp_sim[k, "P5"] <- combinations[[ctry]][k][[1]][5]
temp_sim[k, "Gold"] <- sim$medals_table$First[sim$medals_table$Country == ctry]
temp_sim[k, "Silver"] <- sim$medals_table$Second[sim$medals_table$Country == ctry]
temp_sim[k, "Bronze"] <- sim$medals_table$Third[sim$medals_table$Country == ctry]
temp_sim[k, "TotalScore"] <- sim$medals_table$Score[sim$medals_table$Country == ctry]
temp_sim[k, "MedalCount"] <- sim$medals_table$First[sim$medals_table$Country == ctry] +
sim$medals_table$Second[sim$medals_table$Country == ctry] +
sim$medals_table$Third[sim$medals_table$Country == ctry]
if (gender == "m") {
temp_sim[k, "VT"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "VT"]
temp_sim[k, "FX"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "FX"]
temp_sim[k, "HB"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "HB"]
temp_sim[k, "PB"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "PB"]
temp_sim[k, "PH"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "PH"]
temp_sim[k, "SR"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "SR"]
}
if (gender == "w") {
temp_sim[k, "VT"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "VT"]
temp_sim[k, "BB"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "BB"]
temp_sim[k, "UB"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "UB"]
temp_sim[k, "FX"] <- sim$app_assignments$Athletes[sim$app_assignments$Country == ctry &
sim$app_assignments$App == "FX"]
}
}
all_sims <- rbind(all_sims, temp_sim)
}
print("Done!")
return(list(optimizedteams = start_teams, simresults = all_sims))
}
# start.time <- Sys.time()
# # mens (takes close to 2 hours to run)
# men_best <- get.best.teams(start_teams = startteams,
#                            countries = unique(startteams$Country[startteams$Gender == "m"]),
#                            gender = "m",
#                            means,
#                            stddevs, alt36m)
# end.time <- Sys.time()
# time.taken.mens <- round(end.time - start.time,2)
# time.taken.mens
men_best <- readRDS("data/best.teams.mens.rds")
start.time <- Sys.time()
# womens (takes close to 1 hours to run)
women_best <- get.best.teams(start_teams = startteams,
countries = unique(startteams$Country[startteams$Gender == "w"]),
gender = "w",
means,
stddevs, alt36w)
end.time <- Sys.time()
time.taken.mens <- round(end.time - start.time,2)
time.taken.mens
women_best <- readRDS("data/best.teams.womens.rds")
# saved
# saveRDS(men_best, file = "data/best.teams.mens.rds")
saveRDS(women_best, file = "data/best.teams.womens.rds")
runApp('SHINY APP')
